{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyOeLm8zyKcucD4UsV+YBGI6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GulSauce/GulSauce/blob/main/12191627_%EC%98%A4%EC%98%81%EC%A0%9C_Project_2_1.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "file_upload = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 77
        },
        "id": "weSZss7OB-_N",
        "outputId": "4d604d19-022f-4221-a27e-e908a760bb49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-9a819847-413e-45cd-8168-551940451787\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-9a819847-413e-45cd-8168-551940451787\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 2019_kbo_for_kaggle_v2.csv to 2019_kbo_for_kaggle_v2.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import io\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(io.BytesIO(file_upload[\"2019_kbo_for_kaggle_v2.csv\"]), encoding=\"cp949\")\n",
        "df = df.sort_values(by='year')\n",
        "\n",
        "for year in range(2015, 2019):\n",
        "  template = ['batter_name', '', 'year']\n",
        "\n",
        "  options = ['H', 'avg', 'HR', 'OBP']\n",
        "  for option in options:\n",
        "    template[1] = option\n",
        "    result = df[df['year']==year].nlargest(10, option)\n",
        "    print(result[template])\n",
        "\n",
        "dfSeason2018 = df[df[\"year\"] == 2018]\n",
        "\n",
        "result5 = dfSeason2018.sort_values(by='war', ascending = False).groupby('cp', sort = False)\n",
        "print(result5[['batter_name', 'cp']].head(1))\n",
        "\n",
        "elems = ['R', 'H', 'HR', 'RBI', 'SB', 'war', 'avg', 'OBP', 'SLG']\n",
        "ans = ''\n",
        "tempCorr = -1\n",
        "\n",
        "for elem in elems:\n",
        "  curCorr = df['salary'].corr(df[elem])\n",
        "  if tempCorr < curCorr:\n",
        "    ans = elem\n",
        "    tempCorr = curCorr\n",
        "\n",
        "print(f\"\\n연봉에 highest correlation을 가진 열 : {ans}입니다\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YSrztAl_sc0V",
        "outputId": "0510f85e-8204-4773-8267-f99e16270530"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     batter_name      H  year\n",
            "938          유한준  188.0  2015\n",
            "858          나성범  184.0  2015\n",
            "1626         테임즈  180.0  2015\n",
            "1616           필  174.0  2015\n",
            "109          최형우  174.0  2015\n",
            "149          이용규  168.0  2015\n",
            "1635         아두치  165.0  2015\n",
            "348          이명기  164.0  2015\n",
            "751          박용택  159.0  2015\n",
            "797          박민우  158.0  2015\n",
            "     batter_name    avg  year\n",
            "763          이진석  0.500  2015\n",
            "1626         테임즈  0.381  2015\n",
            "413          배영섭  0.375  2015\n",
            "938          유한준  0.362  2015\n",
            "1004         구자욱  0.349  2015\n",
            "1630         마르테  0.348  2015\n",
            "1348         채태인  0.348  2015\n",
            "1697         박건우  0.342  2015\n",
            "149          이용규  0.341  2015\n",
            "708          서상우  0.340  2015\n",
            "     batter_name    HR  year\n",
            "1626         테임즈  47.0  2015\n",
            "959          강민호  35.0  2015\n",
            "109          최형우  33.0  2015\n",
            "284          최준석  31.0  2015\n",
            "1635         아두치  28.0  2015\n",
            "171          이범호  28.0  2015\n",
            "858          나성범  28.0  2015\n",
            "834          박석민  26.0  2015\n",
            "911          황재균  26.0  2015\n",
            "1895         이승엽  26.0  2015\n",
            "     batter_name    OBP  year\n",
            "763          이진석  0.500  2015\n",
            "1626         테임즈  0.497  2015\n",
            "1682         김태균  0.457  2015\n",
            "413          배영섭  0.444  2015\n",
            "834          박석민  0.441  2015\n",
            "938          유한준  0.430  2015\n",
            "284          최준석  0.428  2015\n",
            "149          이용규  0.427  2015\n",
            "721          안익훈  0.423  2015\n",
            "959          강민호  0.421  2015\n",
            "     batter_name      H  year\n",
            "110          최형우  195.0  2016\n",
            "1683         김태균  193.0  2016\n",
            "1411         손아섭  186.0  2016\n",
            "332          서건창  182.0  2016\n",
            "425          정의윤  179.0  2016\n",
            "581          정근우  178.0  2016\n",
            "51           김주찬  177.0  2016\n",
            "859          나성범  177.0  2016\n",
            "430          고종욱  176.0  2016\n",
            "752          박용택  176.0  2016\n",
            "     batter_name    avg  year\n",
            "1012         권정웅  1.000  2016\n",
            "1787         최원준  0.458  2016\n",
            "322          김웅빈  0.429  2016\n",
            "793          박광열  0.400  2016\n",
            "472          나주환  0.386  2016\n",
            "110          최형우  0.376  2016\n",
            "942          박준혁  0.375  2016\n",
            "1784         정진호  0.375  2016\n",
            "1683         김태균  0.365  2016\n",
            "24           김선빈  0.360  2016\n",
            "     batter_name    HR  year\n",
            "499           최정  40.0  2016\n",
            "264          김재환  37.0  2016\n",
            "172          이범호  33.0  2016\n",
            "1633        로사리오  33.0  2016\n",
            "835          박석민  32.0  2016\n",
            "110          최형우  31.0  2016\n",
            "1896         이승엽  27.0  2016\n",
            "425          정의윤  27.0  2016\n",
            "221          오재일  27.0  2016\n",
            "1912        히메네스  26.0  2016\n",
            "     batter_name    OBP  year\n",
            "1012         권정웅  1.000  2016\n",
            "1784         정진호  0.531  2016\n",
            "1683         김태균  0.475  2016\n",
            "110          최형우  0.464  2016\n",
            "1787         최원준  0.458  2016\n",
            "1693         김태완  0.458  2016\n",
            "657          최재원  0.456  2016\n",
            "99           나지완  0.451  2016\n",
            "1325         신본기  0.451  2016\n",
            "942          박준혁  0.444  2016\n",
            "     batter_name      H  year\n",
            "1412         손아섭  193.0  2017\n",
            "265          김재환  185.0  2017\n",
            "381          이정후  179.0  2017\n",
            "333          서건창  179.0  2017\n",
            "1617        버나디나  178.0  2017\n",
            "1699         박건우  177.0  2017\n",
            "111          최형우  176.0  2017\n",
            "25           김선빈  176.0  2017\n",
            "753          박용택  175.0  2017\n",
            "1006         구자욱  175.0  2017\n",
            "     batter_name    avg  year\n",
            "25           김선빈  0.370  2017\n",
            "1699         박건우  0.366  2017\n",
            "799          박민우  0.363  2017\n",
            "860          나성범  0.347  2017\n",
            "753          박용택  0.344  2017\n",
            "111          최형우  0.342  2017\n",
            "265          김재환  0.340  2017\n",
            "1684         김태균  0.340  2017\n",
            "1727         이상호  0.335  2017\n",
            "1412         손아섭  0.335  2017\n",
            "     batter_name    HR  year\n",
            "500           최정  46.0  2017\n",
            "265          김재환  35.0  2017\n",
            "1627        스크럭스  35.0  2017\n",
            "1338         이대호  34.0  2017\n",
            "1631          러프  31.0  2017\n",
            "502           로맥  31.0  2017\n",
            "442          한동민  29.0  2017\n",
            "100          나지완  27.0  2017\n",
            "1617        버나디나  27.0  2017\n",
            "222          오재일  26.0  2017\n",
            "     batter_name    OBP  year\n",
            "111          최형우  0.450  2017\n",
            "799          박민우  0.441  2017\n",
            "265          김재환  0.429  2017\n",
            "500           최정  0.427  2017\n",
            "753          박용택  0.424  2017\n",
            "1699         박건우  0.424  2017\n",
            "1412         손아섭  0.420  2017\n",
            "25           김선빈  0.420  2017\n",
            "860          나성범  0.415  2017\n",
            "1684         김태균  0.413  2017\n",
            "     batter_name      H  year\n",
            "1382         전준우  190.0  2018\n",
            "1413         손아섭  182.0  2018\n",
            "1339         이대호  181.0  2018\n",
            "112          최형우  179.0  2018\n",
            "861          나성범  177.0  2018\n",
            "266          김재환  176.0  2018\n",
            "762          채은성  175.0  2018\n",
            "245          최주환  173.0  2018\n",
            "1001         박해민  172.0  2018\n",
            "1629         로하스  172.0  2018\n",
            "     batter_name    avg  year\n",
            "507          안상현  0.500  2018\n",
            "82           유재신  0.424  2018\n",
            "691          양원혁  0.400  2018\n",
            "175          장승현  0.385  2018\n",
            "188          전민재  0.375  2018\n",
            "260          정수빈  0.367  2018\n",
            "1353         전병우  0.364  2018\n",
            "1853         김현수  0.362  2018\n",
            "782          양의지  0.358  2018\n",
            "1414          허일  0.357  2018\n",
            "     batter_name    HR  year\n",
            "266          김재환  44.0  2018\n",
            "503           로맥  43.0  2018\n",
            "1629         로하스  43.0  2018\n",
            "1708         박병호  43.0  2018\n",
            "443          한동민  41.0  2018\n",
            "1339         이대호  37.0  2018\n",
            "501           최정  35.0  2018\n",
            "1097         이성열  34.0  2018\n",
            "1382         전준우  33.0  2018\n",
            "1632          러프  33.0  2018\n",
            "     batter_name    OBP  year\n",
            "608          최윤석  1.000  2018\n",
            "82           유재신  0.525  2018\n",
            "691          양원혁  0.500  2018\n",
            "507          안상현  0.500  2018\n",
            "1708         박병호  0.457  2018\n",
            "1353         전병우  0.442  2018\n",
            "175          장승현  0.429  2018\n",
            "260          정수빈  0.429  2018\n",
            "252          국해성  0.429  2018\n",
            "782          양의지  0.427  2018\n",
            "     batter_name    cp\n",
            "1708         박병호   1루수\n",
            "782          양의지    포수\n",
            "266          김재환   좌익수\n",
            "1629         로하스   중견수\n",
            "1413         손아섭   우익수\n",
            "245          최주환   2루수\n",
            "327          김하성   유격수\n",
            "112          최형우  지명타자\n",
            "195          허경민   3루수\n",
            "\n",
            "연봉에 highest correlation을 가진 열 : RBI입니다\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "yblaWUQdszoj"
      }
    }
  ]
}